% ============================================================
% Levenberg - Marquardt and Trust region reflective options
% ============================================================
options = optimoptions('lsqnonlin', ...
                       'Algorithm','levenberg-marquardt', ...
                       'Diagnostics','on', ...
                       'MaxFunctionEvaluations',500, ...
                       'MaxIterations',500, ...
                       'FunctionTolerance',1e-10, ...
                       'StepTolerance',1e-12, ...
	                   'Display','iter');

options = optimoptions('lsqnonlin', ...
                       'Algorithm','trust-region-reflective', ...
                       'Diagnostics','on', ...
                       'MaxFunctionEvaluations',500, ...
                       'MaxIterations',500, ...
                       'FunctionTolerance',1e-10, ...
                       'StepTolerance',1e-12, ...
	                   'Display','iter');

% ============================================================
% Settings for the calibration problem
% (e.g. Feller condition in Heston model)
% ============================================================
% Bound constraints (Lower and Upper bounds on Parameters)
lb = [1e-3, 1e-3, 1e-3, -0.99, 1e-3];
ub = [10, 1.0, 0.45, 0.99, 1.0];

% Linear inequality constraints
A = []; b = [];

% Linear constraints
Aeq = []; beq = [];

% Calibration start
tic
[x,resnorm,residual,exitflag, ...
 output,lambda,jacobian] = lsqnonlin(@sigmaImpDiff,x0,lb,ub, ...
                                      A,b, ...
                                      Aeq,beq, ...
                                      @nonlinconstraint, ...
                                      options);
t1 = toc;

% Non-linear constraints
function [c,ceq] = nonlinconstraint(x)
    c(1) = 2 * x(1) * x(2) - x(3) * x(3); % Feller condition
    % c = [];
    ceq = [];
end